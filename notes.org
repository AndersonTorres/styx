#+title: Developer Notes

Let's reverse-engineer the existing Styx design.


* Repoistory Overview
  .
  ├── default.nix               callPackage ./derivation.nix
  ├── derivation.nix            actual package derivation
  ├── nixpkgs
  │   └── default.nix           updates pkgs.styx to local version (for development?)
  ├── release.nix               for use in nixpkgs?
  ├── scripts
  │   ├── library-doc.nix       generates docs from "documentedFunctions" in library
  │   ├── run-tests             wrapper to nix-build to run tests
  │   ├── screen.js             ???
  │   ├── themes-doc.nix        generates docs from theme configuration interfaces
  │   ├── update-doc            ???
  │   └── update-themes-hashes  ???
  ├── src
  │   ├── doc                   hand-written asciidocs
  │   ├── lib                   styx.lib
  │   ├── nix                   expressions which call site.nix
  │   ├── scaffold              project templates generated by cli tool
  │   ├── styx.sh               styx cli
  │   └── tools                 non-nix auxillary tooling (like parser.py)
  ├── tests
  │   ├── data
  │   ├── default.nix
  │   └── lib.nix
  ├── themes
  │   ├── default.nix           builds themes from github based on ./versions.nix
  │   ├── revs.csv
  │   └── versions.nix          attrsets denoting theme fetch details
  └── VERSION                   defines the styx package version
