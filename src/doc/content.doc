== Content

=== Pages

Pages is the most basic content unit. Every content in Styx is a page (posts and drafts are a special types of pages).

A page in Styx is an attribute set following a set of rules:

- It must define at least the `href`, `title`, `layout` and the `template` keys.
- The `template` key is a function that take the `page` attribute set as a parameter and return the page attribute set augmented with a `content` key representing the result of the template.
- The `layout` key is a function take a page attribute set with a `content` key, returned by the the `template` key, and render the final page source.
- The `href` key is the path of the generated page relative to site root.

It is possible to extend a page attribute set at will for more complex use cases.

[source, nix]
.Page definition example
----
  pages.about = {
    href = "about.html";
    template = templates.about;
    title = "About";
    layout = templates.layout;
  };
----

NOTE: The layout being common to most of the pages, the default layout is usually set with a map function when the page attribute set is converted to a list of pages.

[source, nix]
.Extending a page attribute set
----
  pages.about // { breadcrumbs = [ pages.index ]; }
----

Page content can be directly set in the template, or imported from an external file with the `parsePage` function:

[source, nix]
.Loading a markdown file
----
  about = {
    href = "about.html";
    template = templates.about;
    breadcrumbs = [ index ];
  } // (parsePage { dir = conf.pagesDir; file = "about.md"; });
----

NOTE: `parsePage` return a set with `title` and `content`. `content` is the converted HTML source of the page.

=== Posts

Posts are a special type of pages. By default, Styx read files in markdown format from `conf.postsDir`, but it is possible to specify a custom directory to the `getPosts` function.

Post files should follow the `YYYY-MM-DD-TITLE.md` convention to be loaded. During build, Styx with display a message if it cannot load a post file.

Post attribute sets generated by the `parsePost` function have the following attributes:

- `timestamp`: Timestamp of the post in the `YYYY-MM-DD-TITLE` format.
- `href`: Relative URL to the post.
- `title`: Post title
- `id`: Name part of the post file name.
- `content`: Post content in HTML format.

NOTE: The `getPosts` function does not set a `template` and a `layout` key, so posts generated by it are imcomplete pages. These keys can be set afterwards.

=== Drafts

Drafts are a special type of posts that are only generated when the `--preview` flag is passed to the Styx command.
By default, Styx read files in markdown format from `conf.draftsDir`, but it is possible to specify a custom directory to the `getDrafts` function.

Drafts attribute sets generated by the `parseDraft` function have the following attributes:

- `timestamp`: Timestamp of the post in the `YYYY-MM-DD-TITLE` format.
- `href`: Relative URL to the post.
- `title`: Post title
- `id`: Name part of the post file name.
- `content`: Post content in HTML format.
- `isDraft`: set to `true`.

NOTE: The only difference between posts and drafts is the presence of the `isDraft` attribute.

=== Substitutions

Subtitutions is a way to replace a veriable in a mardown file by a value set in `default.nix`.
A common way to use substitutions is for making in-site links. 

No matter if the link is set relatively (`foo/bar.html`) or absolutely (`/foo/bar.html`), a change to `conf.siteUrl` will break them.

With substitutions, it is possible to use `default.nix` in markdown files.

Substitutions are a set that must be passed to the `getPosts` or the `getDrafts` argument set.
It is possible to extend the substitution set to fit any special needs.

[source, nix]
.Setting substitutions in `default.nix`
----
  posts = let
    substitutions = { inherit conf; }; # <1>
    posts = getPosts { inherit substitutions; from = conf.postsDir; to = "posts"; }; # <2>
    drafts = optionals enableDrafts (getDrafts { inherit substitutions; from = conf.draftsDir; to = "drafts"; }); # <3>
    preparePosts = p: p // { template = templates.post.full; breadcrumbs = with pages; [ index (head archives) ]; };
  in sortPosts (map preparePosts (posts ++ drafts));
----

<1> Creating a subtitution set `containing.conf`. `{ inherit conf; }` is a shorhand of `{ conf = conf; }`.
<2> Pass the substitutions to `getPosts` argument set.
<3> Pass the substitutions to `getDrafts` argument set.

In the markdown file, substitutions are used by surround it by `@`. It is only possible to access substitution set, and impossible to use any nix expression in the substitution.

[source, nix]
.Using a substitution in a mardown file
----
  Learn more in the [Styx 0.1.0 Documentation](@conf.siteUrl@/documentation-v0-1-0.html). # <1>
----

<1> As `conf` is in the substitution set, it is possible to access any of its values with surrounding the attribute path by `@`.

=== Custom content

There is no limitation in the type of content Styx can generate.
The page attribute and the template environment can be extended to include any key that could fit special needs.

It is also possible to use any external program provided in the nixpkgs packages in library functions.

[source, nix]
.Using an external program
----
  title = readFile (pkgs.runCommand "${timestamp}-${id}.title" {} ''
    ${pkgs.xidel}/bin/xidel ${html} -e "//h1[1]/node()" -q > $out # <1>
    echo -n `tr -d '\n' < $out` > $out
  '');
----

<1> Using the link:http://www.videlibri.de/xidel.html[Xidel] program to fetch the first title text of the post.

=== Static files

Static files are the files that are added to the generated site folder.
Static files should be in the `conf.staticDir` directory.

