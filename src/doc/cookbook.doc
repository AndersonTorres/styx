== Cookbook

=== NavBar

The sample `default.nix` is setting a NavBar.
Because the NavBar is a site wide feature is should be applied to the layout template (`layout.nix`).

Setting a Navbar consists in two steps:

1. Extending the base template environment to include a list of pages that should be in the NavBar.

+
Example from `default.nix`:

+
[source, nix]
----
  navbar = let # <1>
             archive = (head pages.archives) // { title = "Archives"; }; # <2>
           in [ archive pages.about ]; # <3>

  templates.layout = loadTemplateWithEnv # <4>
                     (genericEnv // { inherit navbar; feed = pages.feed; }) # <5>
                     "layout.nix"; # <6>
----

+
<1> Declaring a `navbar` variable.
<2> Declare an `archive` variable in the local scope. `pages.archives` is a list of pages so we extract the first page with `head pages.archive`, then we extends this page by setting a `title` using the `//` operator.
<3> The `navbar` value is a list containing the first archive page and the about page.
<4> Loading the `templates.layout` template file.
<5> The first parameter of the `loadTemplateWithEnv` must be an environment attribute set.
`genericEnv` is the generic template environment, but as we want to pass the `navbar` variable to the template, we extends the environment with `navbar`. 
<6> The template file to load.

+
NOTE: `{ inherit navbar; }` is a shortcut to `{ navbar = navbar; }`

2. Using the NavBar template.

+
Styx provides a template for generating the Navbar, `navbar.main.nix`.

+
Example, calling the NavBar template in a template:

+
[source, nix]
----
${templates.navbar.main navbar} # <1>
----

+
<1> `navbar` must be a list of pages as showed in the previous section.

+
NOTE: The brand part of the NavBar displays `conf.siteTitle` by default.
To set the NavBar brand to something different than `conf.siteTitle`, it is recommended to directly edit and change the `navbar.brand.nix` template.

=== Pagination

The `pagination.nix` template provide a generic way to generate a pagination.

[source, nix]
.Using in a page generated by the `splitPage` function
----
templates.pagination { pages = page.pages; index = page.index; }
----

The Styx library provide a `splitPage` function that can be used to split a page in multiple pages according to a list of items and a number of items to display per page.

Its arguments are:

- `baseHref`: `href` of the archive pages, the first page `href` will be `baseHref.html`, following pages `href` will be `baseHref-i.html` where `i` is the index number of the page.
- `template`: template used by the split pages.
- `items`: items to be split through the pages.
- `itemsPerPage`: maximum number of items displayed on each page.

[source, nix]
.Splitting posts into multiple archive pages
----
archives = splitPage {
  baseHref = "archives/posts";
  template = templates.archive;
  items = posts;
  itemsPerPage = conf.postsPerArchivePage;
  title = "Posts";
};
----

It is then possible to use the previous snippet in the used template to add a pagination.

=== Breadcrumbs

Breadcrumbs are enbaled by adding a `breadcrumbs` attribute with the list of pages to include in the breadcrumbs to a page attribute set.
A page attribute set without a breadcrumbs attribute will not display breadcrumbs.

[source, nix]
.Adding breadcrumbs to a page
----
about = {
  href = "about.html";
  template = templates.about;
  title = "About";
  breadcrumbs = [ index ];
};
----

Breadcrumbs are generated with the `breadcrumbs.nix` template. The default base template include this template.

The text of the breadcrumb will be the page `title`. To set a breadcrumb title that is different of `title`, it is possible to use the `breadcrumbTitle` attribute.

