== Library

The library contains various functions that are used through Styx source.
The functions are grouped in namespaces, but are also all included in the top-level scope to be used in an easy way.

=== generation

This namespace contains functions related to content generation.

'''

`generateSite`::
  Description::: Generate a site with a list of pages. This is the function returned by `default.nix`.
  Parameter Type::: Set
  Parameters:::
    * `conf`: The configuration set.
    * `pages`: A list of pages to generate.
    * `preGen` (optional): A set of commands to execute before generating the site.
    * `postGen` (optional): A set of commands to execute after generating the site.
  Return::: A static site.
  Example:::

+
[source, nix]
----
generateSite { inherit conf; pages = pageList; }
----

'''

`pagesToList`::
  Description::: Convert an attribute set of pages to a list of pages. Useful to convert the `pages` attribute set in `default.nix` to a page list for `generateSite`.
  Parameter Type: Standard
  Parameters:::
    * `pages`: An attributes which every key value is a page attribute set or a list of page attribute sets.
  Return::: A list of pages.
  Example:::

+
[source, nix]
----
pages = {
  about = {
    href = "about.html";
    template = templates.about;
  } // (parsePage conf.pagesDir "about.md");
};

pageList = pagesToList pages;
----

'''

[[splitPage]]
`splitPage`::
  Description::: Split a page in multiple pages according to parameters. Used for pagination like pages.
  Parameter Type::: Set
  Parameters:::
    * `baseHref`: The `href` of the archive pages, the first page `href` will be `baseHref.html`, following pages `href` will be `baseHref-i.html` where `i` is the index number of the page.
    * `items`: Items to be split through the pages.
    * `template`: The template used by the split pages.
    * `itemsPerPage`: Maximum number of items displayed on each page.
    * Any extra arguments will be included in the split pages attribute set.
  Return::: A list page attribute sets.
  Example:::

+
[source, nix]
----
archives = splitPage {
  baseHref = "archives/posts";
  template = templates.archive;
  items = posts;
  itemsPerPage = conf.postsPerArchivePage;
  title = "Posts";
};
----

'''

=== nixpkgs

This namespace include the nixpkgs library and link:http://nixos.org/nix/manual/#ssec-builtins[builtins] functions.

=== content

This namespace contains functions to manipulate content, especially posts.

'''

`getPosts`::
  Description::: Fetch all the posts from a `postDir`.
  Parameter Type::: Attribute Set
  Parameters:::
    * `from`: Path to the folder containing the posts.
    * `to`: Part before the name of the post attribute set `href`. Should not contain leading and trailing `/`.
    * `substitutions`: An attribute set containing substitutions (Optional). For details, see <<Substitutions>>.
  Return::: A list of post attribute sets.
  Example:::

+
[source, nix]
----
posts = getPosts { from = conf.postsDir; to = "posts"; };
----

NOTE: The posts attribute sets `href` depends on the post file name and the `outDir`.
For a post in a file `2016-09-12-welcome-to-styx.md` and an `outDir` set to `posts`, the generated post `href` will be `posts/2016-09-12-welcome-to-styx.html`.

'''

`getDrafts`::
  Description::: Fetch all the posts from a `postDir`. This function is similar to `getPosts`, but add a `isDraft = true` attribute to every draft attribute set.
  Parameter Type::: Attribute Set
  Parameters:::
    * `from`: Path to the folder containing the posts.
    * `to`: Part before the name of the post attribute set `href`. Should not contain leading and trailing `/`.
    * `substitutions`: An attribute set containing substitutions (Optional). For details, see <<Substitutions>>.
  Return::: A list of draft attribute sets.
  Example:::

+
[source, nix]
----
posts = getDrafts { from = conf.draftsDir; to = "drafts"; };
----

'''

`parsePage`::
  Description::: Parse a markdown file to a partial page attribute set.
  Parameter Type::: Attribute Set
  Parameters:::
    * `dir`: Path to the folder containing the page.
    * `file`: Page file name.
    * `substitutions`: An attribute set containing substitutions (Optional). For details, see <<Substitutions>>.
  Return::: An attribute set containing `content` (the page HTML source) and `title`.
  Example:::

+
[source, nix]
----
  about = {
    href = "about.html";
    template = templates.about;
    breadcrumbs = [ index ];
  } // (parsePage { dir = conf.pagesDir; file = "about.md"; });
----

'''

`parsePost`::
  Description::: Convert a post file into a post attribute set.
  Parameter Type::: Standard
  Parameters:::
    * `postDir`: Path to the folder containing the post.
    * `filename`: Post file name.
  Return::: A post attribute set.
  Example:::

+
[source, nix]
----
myPost = parsePost conf.postsDir "2016-09-12-welcome-to-styx.md";
----

NOTE: `parsePost` is also used for drafts as posts and drafts have similar structures.

'''

`sortPosts`::
  Description::: Sort a list of posts chronologically.
  Parameter Type::: Standard
  Parameters:::
    * `postList`: A list of posts to sort.
  Return::: The sorted list of posts.
  Example:::

+
[source, nix]
----
sortedPosts = sortPosts (getPosts conf.postsDir "posts");
----

'''

=== template

This namespace contains functions to manipulate templates.

'''

`htmlAttr`::
  Description::: Generate an HTML attribute.
  Parameter Type::: Standard
  Parameters:::
    * `attrName`: The attribute name.
    * `value`: The attribute value, can be a list.
  Return::: An HTML attribute.
  Example:::

+
[source, nix]
----
htmlAttr "class" "foo"
=> class="foo"

htmlAttr "class" [ "foo" "bar" ]
=> class="foo bar"
----

'''

`mapTemplate`::
  Description::: Map a template to a list of items.
  Parameter Type::: Standard
  Parameters:::
    * `template`: The template function.
    * `list`: A list of items passed to the template function.
  Return::: Resulting HTML.
  Example:::

+
[source, nix]
----
mapTemplate templates.post.list page.posts
----

'''

`prettyTimestamp`::
  Description::: Convert a timestamp to a prettier format.
  Parameter Type::: Standard
  Parameters:::
    * `timestamp`: A timestamp in the format `YYYY-MM-DD`.
  Return::: A timestamp in format `DD MMM YYYY`.
  Example:::

+
[source, nix]
----
prettyTimestamp "2016-09-26"
=> "26 SEP 2016"
----

'''

=== utils

This namespace contains various utility functions.

'''

`overrideConf`::
  Description::: Extend the configuration attribute set.
  Parameter Type::: Standard
  Parameters:::
    * `conf`: The configuration attribute set.
    * `override`: The override configuration set.
  Return::: Overridden configuration.
  Example:::

+
[source, nix]
----
conf = overrideConf (import ./conf.nix) args;
----

'''

`loadTemplateWithEnv`::
  Description::: Load a template with a template environment.
  Parameter Type::: Standard
  Parameters:::
    * `env`: The template environment set.
    * `template`: The template file to load, relatively to `conf.templatesDir`.
  Return::: The template function.
  Example:::

+
[source, nix]
----
index = loadTemplateWithEnv { inherit conf state lib templates; } "index.nix";
----

'''

`setDefaultLayout`::
  Description::: Set a layout to a page attribute set. Does nothing if the page attribute set has already a layout.
  Parameter Type::: Standard
  Parameters:::
    * `layout`: The layout template.
    * `page`: A page attribute set.
  Return::: A page attribute set with `layout` set.
  Example:::

+
[source, nix]
----
  pageList =
    let list = (pagesToList pages);
    in map (setDefaultLayout templates.layout) list;
----

'''

`setTemplate`::
  Description::: Set a template to a page attribute set.
  Parameter Type::: Standard
  Parameters:::
    * `template`: The template function.
    * `page`: A page attribute set.
  Return::: The template function partially evaluated.
  Example:::

+
[source, nix]
----
map (setTemplate templates.post.full) (posts ++ drafts)
----

'''

