= Styx manual
version @version@
:description: Styx static site generator documentation
:toc: left
:toclevels: 4
:icons: font
:sectnums:
:sectanchors:

== Introduction

Styx is a functional static site generator written in Nix expression language.

Styx is aimed to be flexible and easy to customize, also Styx is usin the Nix package manager so it has a very performant caching system.
It also allow to use external applications in a very easy way without having to install them.

Pros:

- Uniformity: The same expression language used in templates and logic.
- Caching: Styx benefit of the Nix package system caching system, only needed pages are rebuild.
- Light weight: Styx has very few dependencies.
- Customizable: It is very easy to implement new features.

Cons:

- Performance: Some parts of Styx like the posts conversion can be *very* slow, this is partly counter-balanced by the caching system, but on a fresh site generation Styx can be magnitudes slower than other static site generators.
- Semantics: Styx is using the Nix expression language for its logic and templates. The Nix expression language is quite different of usual languages and can require some time to get familiar with.
- Nix: Styx has only one dependency, the Nix package manager. To use Styx you must install Nix, and depending your platform, that can be challenging. But installing Nix might totally change your views on package management!

== Installation

The only requirement to install Styx is the link:http://nixos.org/nix/[Nix package manager].
Refer to the link:http://nixos.org/nix/manual/#chap-installation[Nix installation instructions] to install Nix.

Styx does not have an official release yet, but it is possible to install a development snapshot with the following command:

[source, bash]
----
$ nix-env -i https://github.com/ericsagnes/styx/archive/master.tar.gz
----

To only test styx, it is recommended to use the `nix-shell` command to start a temporary environment including styx:

[source, bash]
----
$ nix-shell -p `nix-build https://github.com/ericsagnes/styx/archive/master.tar.gz`
----


== QuickStart

A styx site can be created and locally served with the following set of commands:

[source, bash]
----
$ nix-shell -p `nix-build https://github.com/ericsagnes/styx/archive/master.tar.gz` # <1>
[nix-shell]$ styx new myblog # <2>
[nix-shell]$ cd myblog # <3>
[nix-shell:~/myblog]$ styx serve # <4>
----

<1> Enter a nix-shell with styx.
<2> Generate a new site in the `myblog` directory.
<3> Enter the styx site root folder.
<4> Serve the site on a local server.

== Basics

Styx is using the Nix expression language.
The Nix expression language is a lazy evaluated functional language with unconventional semantics. It is recommended to read the link:http://nixos.org/nix/manual/#ch-expression-language[Nix expression language chapter] of the Nix manual to get more familiar with it.

=== Configuration

Styx is configured with the `conf.nix` file in the site root directory.

[source, nix]
.conf.nix
----
include::../sample/conf.nix[]
----

The configuration a Nix attribute set, and new configuration options can be added at will.

TODO: document default configuration options.

=== Directory Structure

[source]
----
├── conf.nix # <1>
├── default.nix # <2>
├── drafts/ # <3>
├── lib/ # <4>
├── nixpkgs-path.nix # <5>
├── posts/ # <6>
├── static/ # <7>
└── templates/ # <8>
----

<1> `conf.nix` is the main configuration, see <<Configuration>> for details.
<2> `default.nix` is the main file for site generation, see <<defaultnix>> for details.
<3> `drafts/` is the default directory containing drafts, see <<Drafts>> for details.
<4> `lib/` is the directory holding styx library functions, see <<Library>> for details.
<5> `nixpkgs-path.nix` is the file setting the nixpkgs to use, it should not be changed.
<6> `posts/` is the default directory containing drafts, see <<Drafts>> for details.
<7> `static/` is the default directory containing static files, see <<Static files>> for details.
<8> `templates/` is the default directory containing templates files, see <<Templates>> for details.

[[defaultnix]]
=== default.nix

`default.nix` is the central file of a styx file and is reponsible for generating the website.

TODO: explain the sample `default.nix`.

=== Library

The library contains various functions that are used through styx source.
The functions are grouped in namespaces, but are also all included in the top-level scope to be used in an easy manner.

=== generation

This namespace contains functions related to content generation.

'''

`generateSite`::
  Description::: Generate a site with a list of pages. This is the function returned by `default.nix`.
  Parameter Type::: Set
  Parameters:::
    * `conf`: The configuration set.
    * `pages`: A list of pages to generate.
    * `preGen` (optional): A set of commands to execute before generating the site.
    * `postGen` (optional): A set of commands to execute after generating the site.
  Return::: A generated Styx site.
  Example:::

+
[source, nix]
----
generateSite { inherit conf; pages = pageList; }
----

'''

`pagesToList`::
  Description::: Convert an attribute set of pages to a list of pages. Useful to convert the `pages` attribute set in `default.nix` to a page list for `generateSite`.
  Parameter Type: Standard
  Parameters:::
    * `pages`: An attributes which every key value is a page attribute set.
  Return::: A list of pages.
  Example:::

+
[source, nix]
----
pages = {
  about = {
    href = "about.html";
    template = templates.about;
    title = "About";
  };
};

pageList = pagesToList pages;
----

'''

`splitPage`::
  Description::: Split a page in multiple pages according to parameters. Used for pagination like pages.
  Parameter Type::: Set
  Parameters:::
    * `baseHref`: The `href` of the archive pages, the first page `href` will be `baseHref.html`, following pages `href` will be `baseHref-i.html` where `i` is the index number of the page.
    * `items`: Items to be splitted through the pages.
    * `template`: The template used by the splitted pages.
    * `itemsPerPage`: Maximum number of items displayed on each page.
    * Any extra arguments will be included in the splitted pages attribute set.
  Return::: A list of splitted pages.
  Example:::

+
[source, nix]
----
archives = splitPage {
  baseHref = "archives/posts";
  template = templates.archive;
  items = posts;
  itemsPerPage = conf.postsPerArchivePage;
  title = "Posts";
};
----

'''

=== nixpkgs

This namespace include the nixpkgs library and link:http://nixos.org/nix/manual/#ssec-builtins[builtins] functions.

=== posts

This namespace contains functions to manipulate posts.

'''

`getPosts`::
  Description::: Fetch all the posts from a `postDir`.
  Parameter Type::: Standard
  Parameters:::
    * `postsDir`: Path to the folder containing the posts.
  Return::: A list of post attribute sets.
  Example:::

+
[source, nix]
----
posts = getPosts conf.postsDir;
----

'''

`getDrafts`::
  Description::: Fetch all the posts from a `postDir`. This function is similar to `getPosts`, but add a `isDraft = true` attribute to every draft attribute set.
  Parameter Type::: Standard
  Parameters:::
    * `draftsDir`: Path to the folder containing the drafts.
  Return::: A list of draft attribute sets.
  Example:::

+
[source, nix]
----
posts = getDrafts conf.draftsDir;
----

'''

`parsePost`::
  Description::: Convert a post file into a post attribute set.
  Parameter Type::: Standard
  Parameters:::
    * `postDir`: Path to the folder containing the post.
    * `filename`: Post file name.
  Return::: A post attribute set.
  Example:::

+
[source, nix]
----
myPost = parsePost conf.postsDir "2016-09-12-welcome-to-styx.md";
----

'''

`sortPosts`::
  Description::: Sort a list of posts chronologically.
  Parameter Type::: Standard
  Parameters:::
    * `postList`: A list of posts to sort.
  Return::: The sorted list of posts.
  Example:::

+
[source, nix]
----
sortedPosts = sortPosts (getPosts conf.postsDir);
----

'''

=== template

This namespace contains functions to manipulate templates.

'''

`htmlAttr`::
  Description::: Generate an HTML attribute.
  Parameter Type::: Standard
  Parameters:::
    * `attrName`: The attribute name.
    * `value`: The attribute value, can be a list.
  Return::: An HTML attribute.
  Example:::

+
[source, nix]
----
htmlAttr "class" "foo"
=> class="foo"

htmlAttr "class" [ "foo" "bar" ]
=> class="foo bar"
----

'''

`mapTemplate`::
  Description::: Map a template to a list of items.
  Parameter Type::: Standard
  Parameters:::
    * `template`: The template function.
    * `list`: A list of items passed to the template function.
  Return::: Resulting HTML.
  Example:::

+
[source, nix]
----
mapTemplate templates.post.list page.posts
----

'''

`prettyTimestamp`::
  Description::: Convert a timestamp to a prettier format.
  Parameter Type::: Standard
  Parameters:::
    * `timestamp`: A timestamp in the format `YYYY-MM-DD`.
  Return::: A timestamp in format `DD MMM YYYY`.
  Example:::

+
[source, nix]
----
prettyTimestamp "2016-09-26"
=> "26 SEP 2016"
----

'''

=== utils

This namespace contains various utily functions.

'''

`overrideConf`::
  Description::: Extend the configuration attribute set.
  Parameter Type::: Standard
  Parameters:::
    * `conf`: The configuration attribute set.
    * `override`: The override configuration set.
  Return::: Overriden configuration.
  Example:::

+
[source, nix]
----
conf = overrideConf (import ./conf.nix) args;
----

'''

`loadTemplateWithEnv`::
  Description::: Load a template with a template environment.
  Parameter Type::: Standard
  Parameters:::
    * `env`: The template environment set.
    * `template`: The template file to load, relatively to `conf.templatesDir`.
  Return::: The template function.
  Example:::

+
[source, nix]
----
index = loadTemplateWithEnv { inherit conf state lib templates; } "index.nix";
----

'''

`setTemplate`::
  Description::: Set a template to a page attribute set.
  Parameter Type::: Standard
  Parameters:::
    * `template`: The template function.
    * `page`: A page attribute set.
  Return::: The template function.
  Example:::

+
[source, nix]
----
map (setTemplate templates.post.full) (posts ++ drafts)
----

'''


== Content

=== Pages

Pages is the most basic content unit. Every content in Styx is a page (posts and drafts are a special types of pages).

A page in Styx is an attribute set following a set of rules:

- It must define at least the `href`, `title` and the `template` keys.
- The `template` key must be a template function that take the `page` attribute set as a parameter and return the page source.
- The `href` key is the path of the generated page relative to site root.

It is possible to extend a page attribute set at will for more complex use cases.

[source, nix]
.Page definition example
----
  pages.about = { href = "about.html"; template = templates.about; title = "About"; };
----


[source, nix]
.Extending a page attribute set
----
  pages.about // { title = "About"; }
----


=== Posts

Posts are a special type of pages. Posts should be located in configuration `postsDir` value and in markdown format.
Posts files should be in the `conf.postsDir` directory.

Post files should follow the `YYYY-MM-DD-TITLE.md` convention to be loaded. During build, styx with display a message if it cannot load a post file.

=== Drafts

Drafts are a special type of posts that are only generated when the `-preview` flag is passed to styx.
Drafts files should be in the `conf.draftsDir` directory.

=== Custom content

There is no limitation in the type of content styx can generate.
The page attribute and the template environment can be extended to include any key, and the templates can also be extended.

It is also possible to use any program provided in the nixpkgs packages in library functions.

[source, nix]
.Example snippet from `lib.posts.parsePost` function
----
  title = readFile (pkgs.runCommand "${timestamp}-${id}.title" {} ''
    ${pkgs.xidel}/bin/xidel ${html} -e "//h1[1]/node()" -q > $out # <1>
    echo -n `tr -d '\n' < $out` > $out
  '');
----

<1> Using the link:http://www.videlibri.de/xidel.html[Xidel] program to fetch the first title text of the post.

=== Static files

Static files are the files that are added to the generated site folder.
Static files should be in the `conf.staticDir` directory.

== Customization

This section introduce how to customize your styx site.

=== Templates

Styx templates are functions that return text when fully evaluated.

==== Basic templates

The most basic template is a function that takes the template environment as parameter and return a text.

[source, nix]
.Basic template
----
environment: # <1>
''
  hello world! # <2>
''
----

<1> Functions in Nix are declared in the form `argument: body`, so this declare a function taking an `environment` parameter.
<2> This is the text returned by the function, `''` denotes that the text is multiline.

==== Page templates

A page template is a template that takes the page attribute as an extra parameter.

[source, nix]
.Basic page template
----
environment:
page: # <1>
''
  hello world!
''
----

<1> The page attribute set.


==== Template environment

The template environment is the first parameter of the template function.
It is defined with template loading function in `default.nix`.

The default template environment consists in:

- `conf`: the configuration attribute set
- `templates`: the templates attribute set
- `state`: the state attribute set, by default it only holds the timestamp of the generation
- `lib`: the library attribute set, it contains styx and nixpkgs functions.

It is possible to extend the template environment at will.

There are two ways of writing the `environment` in the template, as a set or as a deconstructed set.

[source, nix]
.Environment as a variable
----
environment: # <1>
page:
''
  ${environment.conf.siteTitle}
''
----

<1> `environment` is used as a set, and its key can be accessed with `.`.

[source, nix]
.Environment as a deconstructed set
----
{ conf, lib, ... }: # <1>
page: # <1>
''
  ${conf.siteTitle}
''
----

<1> environment is descontructed in its keys values. The last `...` means all others keys and is required if the set contains more keys than the keys deconstructed.

=== Calling templates in templates

TODO

=== Applying templates to multiple contents

TODO

== Cookbook

=== NavBar

The sample `default.nix` is setting a NavBar.
Because the NavBar is a site wide feature is should be applied to the base template (`base.nix`).

Setting a Navbar consists in two steps:

1. Extending the base template environment to include a list of pages that should be in the navbar.

+
Example from `default.nix`:

+
[source, nix]
----
  navbar = let # <1>
             archive = (head pages.archives) // { title = "Archives"; }; # <2>
           in [ archive pages.about ]; # <3>

  templates.base = loadTemplateWithEnv # <4>
                     (genericEnv // { inherit navbar; }) # <5>
                     "base.nix"; # <6>
----

+
<1> Declaring a `navbar` variable.
<2> Declare an `archive` variable in the local scope. `pages.archives` is a list of pages so we extract the first page with `head pages.archive`, then we extends this page by setting a `title` using the `//` operator.
<3> The `navbar` value is a list containing the first archive page and the about page.
<4> Loading the `templates.base` template file.
<5> The first parameter of the `loadTemplateWithEnv` must be an environment attribute set.
`genericEnv` is the generic template environment, but as we want to pass the `navbar` variable to the template, we extends the environment with `navbar`. 
<6> The template file to load.

+
NOTE: `{ inherit navbar; }` is a shortcut to `{ navbar = navbar; }`

2. Using the NavBar template.

+
Styx provides a template for generating the Navbar, `navbar.main.nix`.

+
Example, calling the NavBar template in a template:

+
[source, nix]
----
${templates.navbar.main navbar} # <1>
----

+
<1> `navbar` must be a list of pages as showed in the previous section.

+
NOTE: The brand part of the NavBar displays `conf.siteTitle` by default.
To set the NavBar brand to something different than `conf.siteTitle`, it is recommended to directly edit and change the `navbar.brand.nix` template.

=== Pagination

The `pagination.nix` template provide a generic way to generate a pagination.

[source, nix]
.Using in a page generated by the `splitPage` function
----
templates.pagination { pages = page.pages; index = page.index; }
----

The styx library provide a `splitPage` function that can be used to split a page in multiple pages according to a list of items and a number of items to display per page.

Its arguments are:

- `baseHref`: `href` of the archive pages, the first page `href` will be `baseHref.html`, following pages `href` will be `baseHref-i.html` where `i` is the index number of the page.
- `template`: template used by the splitted pages.
- `items`: items to be splited through the pages.
- `itemsPerPage`: maximum number of items displayed on each page.

[source, nix]
.Splitting posts into multiple archive pages
----
archives = splitPage {
  baseHref = "archives/posts";
  template = templates.archive;
  items = posts;
  itemsPerPage = conf.postsPerArchivePage;
  title = "Posts";
};
----

It is then possible to use the previous snippet in the used template to add a pagination.

=== Breadcrumbs

Breadcrumbs can be set by adding a `breadcrumbs` attribute with the list of pages to include in the breadcrumbs.
An attribute set without a breadcrumbs attribute will not have breadcrumbs.

[source, nix]
.Adding breadcrumbs to a page
----
about = {
  href = "about.html";
  template = templates.about;
  title = "About";
  breadcrumbs = [ index ];
};
----

Breadcrumbs are generated with the `breadcrumbs.nix` template. The default base template include this template.

The text of the breadcrumb will be the page `title`. It is possible to set different text that the title by setting a `breadcrumbTitle` to page.

== Deployment

TODO

== Release Notes

TODO make a release
