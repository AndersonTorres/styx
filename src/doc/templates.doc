== Templates

Styx templates are functions that return text or page attribute sets when fully evaluated.

Templates are divided in two types:

- Layout templates, responsible for the final rendering of a page, it must return text. (page attribute set `layout` key)
- Partial templates, responsible for the partial rendering of a page, it should return a page attibute set, but in some special cases can return text. (page attribute set `template` key)

The template evaluation flow is:

- The partial template evaluate the page attribute set and generates a partial result that is stored in the page attribute set `content` key.
- The layout template evaluate the page attribute set returned by the partial template and produce the final source of the page.

=== Text handling basics

Most of the work in template is done by manipulating text.

This introduce the basics of text handling in the templates:

- single-line or multi-line text (leading spaces are stripped without changing relative line align), delimited by `''`.

+
[source, nix]
.Multi-line text
----
''
  Hello world!
  Hello Styx!
''
----

- single-line or multi-line text, delimited by `"`.

+
[source, nix]
.Single-line text
----
"Hello world!"
----

Nix expressions can be included in text in enclosed in `${...}`.

[source, nix]
.Expression antiquotation
----
let name = "world"; in
"Hello ${name}!"
----

=== Layout templates

The layout template is responsible for rendering the final source of the page.
The layout template function usually takes a template environment, and a page attribute set with a `content`. (There are exceptions)

In a HTML context, the layout template is usually responsible of the HTML code that is not directly related to the content, like the `head` tag.

[source, nix]
.Layout template example
----
env:
page:
''
  <html>
    ...
  <body>
    ...
    ${page.content}
    ...
  </body>
  </html>
''
----

TIP: Layout templates are just functions, in case the partial template return the full page source like in the rss feed case, it is possible to set the page `layout` to the `id` function. This will make the layout evaluation transparent and return the `template` result.

=== Partial templates

Partial templates are similar to the layout templates, with the only difference that their result will be evaluated by the layout template.
The partial template should set or update the `content` attribute of the page attribute set so the layout template can render the final source.

Partial templates can also add other attributes to the page attribute to fit any special need.

[source, nix]
.Example of a partial template
----
{ templates, ... }:
page:
let
  content =
    ''
      <h1>${page.title}</h1>
    '';
in
  page // { inherit content; }
----

NOTE: In some cases, it is useful to have the partial template to return the final source of the page.
By setting the page `layout` to the `id` function, it is possible to bypass the layout template and have the partial template result being the final source source of the page.

=== Template environment

The template environment is the first parameter of the template function.
It is defined when loading the template in `site.nix`.

The default template environment consists in:

- `conf`: the configuration attribute set
- `lib`: the library attribute set, it contains Styx and nixpkgs functions.
- `state`: the state attribute set, by default it only holds the timestamp of the generation
- `templates`: the templates attribute set

It is possible to extend the default template environment to fit custom needs.

It is possible to set a specific template environment to a specific template by declaring it in the `customTemplateEnvironments` set.

[source, nix]
.Setting custom template environments
----
  customEnvironments = {
    layout = defaultEnvironment // { inherit navbar; feed = pages.feed; }; # <1>
  };
----

<1> The environment passed to the `layout` template is the default environment extended with `feed` and `navbar` variables.

==== Template environment in templates

There are two ways of writing the `environment` in the template, as a set or as a deconstructed set.

[source, nix]
.Environment as a variable
----
environment: # <1>
page:
''
  ${environment.conf.siteTitle}
''
----

<1> `environment` is used as a set, and its key can be accessed with `.`.

[source, nix]
.Environment as a deconstructed set
----
{ conf, lib, ... }: # <1>
page: # <1>
''
  ${conf.siteTitle}
''
----

<1> environment is deconstructed in its keys values. The last `...` means all others keys and is required if the set contains more keys than the keys deconstructed.

=== Calling templates in templates

It is possible to call templates in a template by accessing to the `templates` attribute of the template generic environment.

[source, nix]
.Calling a template in a template
----
{ templates, ... }:
page:
''
  ${templates.foo}
''
----

NOTE: The `loadTemplateWithEnv` function, or calling the `loadTemplate` with an environment will partially evaluate the template function. This means that the template function will be become a single argument function (`page`).

WARNING: Trying to call the current template will trigger an infinite loop and make the site generation fail.

=== Applying templates to multiple contents

The `mapTemplate` function can be used to map a template to a list of contents.

[source, nix]
.Applying a template to multiple contents
----
{ templates, ... }:
page:
''
  ${mapTemplate templates.post.list page.posts}
''
----

